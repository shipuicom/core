@use '../helpers.scss' as *;

$spkTooltip: true !default;

@if $spkTooltip == true {
  .tooltip {
    --tt-bg: var(--base-3);
    --tt-c: var(--base-12);
    --tt-mh: #{p2r(136)};
    --tt-mw: #{p2r(280)};

    anchor-name: --dropdown-trigger-anchor;
    position: relative;

    &:after {
      content: '';
      position: absolute;
      top: p2r(-8);
      bottom: p2r(-8);
      left: p2r(-8);
      right: p2r(-8);
      z-index: 1;
    }

    &.primary {
      --tt-bg: var(--primary-2);
      --tt-c: var(--primary-8);
    }

    &.accent {
      --tt-bg: var(--accent-2);
      --tt-c: var(--accent-8);
    }

    &.warn {
      --tt-bg: var(--warn-2);
      --tt-c: var(--warn-8);
    }

    &.error {
      --tt-bg: var(--error-2);
      --tt-c: var(--error-8);
    }

    &.success {
      --tt-bg: var(--success-2);
      --tt-c: var(--success-8);
    }

    &:hover {
      sparkle-tooltip-wrapper {
        opacity: 1;
        visibility: visible;
        transform: translateY(-#{p2r(8)}) scale(1);
      }
    }

    sparkle-tooltip-wrapper {
      position: absolute;
      position-try-fallbacks: --dropdown-flip-and-slide;
      opacity: 0;
      visibility: hidden;
      bottom: 100%;
      padding: p2r(4);
      transform: translateY(100%) scale(0.95);
      transition:
        opacity 0.2s ease,
        visibility 0.2s ease,
        transform 0.2s ease;

      background: var(--tt-bg);
      border-radius: var(--shape-2);
      box-shadow: var(--box-shadow-20);
      width: max-content;

      &:before {
        content: '';
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        border-width: p2r(6);
        border-style: solid;
        border-color: transparent;
        border-top-color: var(--tt-bg);
        width: 0;
        height: 0;
        opacity: 1;
      }

      .tooltip-content {
        padding: p2r(8 12);
        position: relative;
        hyphens: auto;
        text-wrap: pretty;
        color: var(--tt-c);
        max-height: var(--tt-mh);
        max-width: var(--tt-mw);
        overflow-y: auto;
        overflow-x: hidden;
      }
    }

    /* Define the fallback strategies for the dropdown menu */
    @position-fallback --dropdown-flip-and-slide {
      /* Attempt 1: Position below and align to the start (left) of the trigger */
      @try {
        top: calc(anchor(--dropdown-trigger-anchor bottom) + 8px); /* 8px gap */
        left: anchor(--dropdown-trigger-anchor left);
      }
      /* Attempt 2: Position above and align to the start (left) of the trigger */
      @try {
        bottom: calc(anchor(--dropdown-trigger-anchor top) + 8px); /* 8px gap */
        left: anchor(--dropdown-trigger-anchor left);
      }
      /* Attempt 3: Position below and align to the end (right) of the trigger */
      @try {
        top: calc(anchor(--dropdown-trigger-anchor bottom) + 8px);
        right: anchor(--dropdown-trigger-anchor right);
      }
      /* Attempt 4: Position above and align to the end (right) of the trigger */
      @try {
        bottom: calc(anchor(--dropdown-trigger-anchor top) + 8px);
        right: anchor(--dropdown-trigger-anchor right);
      }
      /* Attempt 5: (More advanced) If it's too wide, try to align center, below */
      @try {
        top: calc(anchor(--dropdown-trigger-anchor bottom) + 8px);
        left: anchor(--dropdown-trigger-anchor center);
        /* This might need more constraints or a width calculation if it's wider than anchor */
        transform: translateX(-50%); /* Center it based on its own width */
      }
      /* Attempt 6: (More advanced) If it's too wide, try to align center, above */
      @try {
        bottom: calc(anchor(--dropdown-trigger-anchor top) + 8px);
        left: anchor(--dropdown-trigger-anchor center);
        transform: translateX(-50%);
      }
    }
  }
}
