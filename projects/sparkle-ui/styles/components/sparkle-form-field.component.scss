@use '../helpers.scss' as *;

$spkFormField: true !default;
$spkFormFieldShadow: false !default;

@if $spkFormField == true {
  spk-form-field-popover,
  spk-form-field {
    --ff-s: var(--shape-2);
    --ff-bc: var(--base-level-40);
    --ff-prefix-bg: var(--base-level-20);
    --ff-ic: var(--base-level-60);
    --ff-bg: var(--base-level-10);
    --ff-f: var(--paragraph-30B);
    --ff-spinner-size: #{p2r(20)};
    --ff-spinner-thickness: #{p2r(2)};
    --ff-space: #{p2r(9 12)};
    --ff-mw: auto;

    @if $spkFormFieldShadow != false {
      --ff-bs: var(--box-shadow-10);
    } @else {
      --ff-bs: none;
    }

    display: flex;
    flex-direction: column;
    align-items: flex-start;
    position: relative;

    &[read-only],
    &[read-only='true'],
    &[readonly='true'],
    &[readonly],
    &.readonly,
    &[disabled],
    &[disabled='true'],
    &.disabled,
    &:has(input[disabled]),
    &:has(textarea[disabled]),
    &:has(textarea[disabled='true']),
    &:has(input[disabled='true']) {
      pointer-events: none;
      user-select: none;
      opacity: 0.5;
    }

    &.small {
      --ff-space: #{p2r(8 10)};
      --ff-f: var(--paragraph-40B);

      .prefix,
      .suffix {
        > spk-icon {
          font-size: p2r(16);
        }
      }
    }

    &.center {
      .input-wrap input[type='number'],
      .input-wrap input {
        text-align: center;
      }
    }

    label {
      display: flex;
      align-items: center;
      padding-bottom: p2r(4);
      gap: p2r(4);

      spk-icon {
        font-size: p2r(16);
      }
    }

    .suffix,
    .prefix {
      display: none;
      align-items: center;
      gap: p2r(4);
      padding: var(--ff-space);
      transition: background-color 125ms linear;
      background-color: var(--ff-prefix-bg);

      &:not(:empty) {
        display: flex;
      }
    }

    .suffix {
      background-color: transparent;
      padding-left: 0;
    }

    &:not(:has(.helpers .error:empty)) {
      --ff-ic: var(--error-500);
      --ff-bc: var(--error-500);
      --ff-prefix-bg: var(--error-level-20);
    }

    &.autosize .input-wrap {
      height: auto;

      textarea,
      input {
        field-sizing: content;
      }
    }

    .input-wrap {
      display: flex;
      align-items: center;
      border: 1px solid var(--ff-bc);
      border-radius: var(--ff-s);
      background: var(--ff-bg);
      box-shadow: var(--ff-bs);
      overflow: hidden;
      transition: border-color 125ms linear;
      min-width: var(--ff-mw);

      spk-popover,
      .input {
        flex: 1 0;
      }

      textarea {
        resize: none;
        margin: p2r(8 0);
        color: var(--base-level-60);
        field-sizing: content;
      }

      &:has(textarea) {
        height: auto;
        min-width: 100%;
        max-width: 100%;
      }

      spk-icon {
        color: var(--ff-ic);
        transition: color 125ms linear;
      }

      spk-chip spk-icon {
        color: var(--chip-ic);
      }

      spk-spinner {
        --spinner-size: var(--ff-spinner-size);
        --spinner-thickness: var(--ff-spinner-thickness);
      }

      textarea,
      input {
        appearance: none;
        border: 0;
        padding: 0;
        background: transparent;
        font: var(--paragraph-30B);
        flex: 1 0;
        color: var(--base-level-60);
        margin: var(--ff-space);

        &::placeholder {
          color: var(--base-level-60R);
        }

        &:focus {
          outline: none;
        }

        &[type='number'] {
          appearance: textfield;
          text-align: right;

          &::-webkit-outer-spin-button,
          &::-webkit-inner-spin-button {
            display: none;
          }

          &:has(+ .suffix:not(:empty)) {
            margin-right: 0;
          }
        }
      }
    }

    .helpers {
      height: p2r(20);
      display: flex;
      align-items: center;
      gap: p2r(4);
      padding-top: p2r(4);

      &:has(.error:empty):has(.hint:empty) {
        height: 0;
        padding-top: 0;
      }

      &:not(:has(.error:empty)) {
        .hint {
          opacity: 0;
          visibility: hidden;
        }
      }

      [hint] {
        color: var(--base-level-60R);

        &[suffix] {
          justify-self: flex-end;
        }
      }
    }

    .hint {
      display: flex;
      align-items: center;
      justify-content: space-between;
      width: 100%;
      color: var(--base-level-60R);
      opacity: 1;
      transition:
        visibility 125ms linear,
        opacity 125ms linear;
      visibility: visible;

      &:empty {
        opacity: 0;
      }
    }

    .error {
      color: var(--error-500);
      opacity: 1;
      transition: opacity 125ms linear;
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100%;

      &:empty {
        opacity: 0;
      }
    }

    &.error {
      --ff-ic: var(--error-500);
    }

    &.error {
      --ff-ic: var(--warn-500);
    }

    &.success {
      --ff-ic: var(--success-500);
    }
  }
}
